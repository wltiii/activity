= Interview Exercise - Outdoor Activities Suggestor
Bill Turner
:toc:
:toc-placement!:

toc::[]

== Requirements ==
. Create a RESTful API that determines if it is a good day to do things outside
(ski, run, swim, etc.) for the week.
. Weather Underground (http://www.wunderground.com/weather/api) and Forecast.io
(https://developer.forcast.io) are good options for data.
. The service takes location and date(s).
. Use a DSL or "rules engine" to determine what activities for the weather conditions on each day.
. Return the result as JSON
. Don't spend more than three days on this project.

== Goals ==

I believe that what was wanted was something that not only worked, but also demonstrated:

. Design skills
. Knowledge of Groovy
. Knowledge of unit testing, in particular with Spock
. Coding practice

In addition, by developing this, I was able to demonstrate other things.

. Knowledge of current architectural practices, i.e. microservices, which demonstrates an
awareness of trends in the field
. The ability to come up to speed quickly with technologies of which I have little or
no knowledge. I had never used DropWizard nor Drools before developing this solution.
. The ability to deliver a working solution in the time span typically available for a
story.

== Architecture Overview ==
All applications can be solved in a myriad of ways. After reading the requirements, I chose to
create a solution as a set of three microservices: activity, forecast, and suggestion
(see https://github.com/wltiii). Herein, when I speak of the application, I am referring to
the solution as a whole. Mention one of the microservices specifically is a setting of the
context.


Activity is an orchestrator. It manages calls to the other services and returns suggestions.
Forecast calls other weather forecasting services (at present only one) and merges those
results into a common response. Suggestion wraps a rules engine which takes weather conditions
and returns a suggested activity.

=== Endpoint Design ===

.Activity Service Method/URI Definitions
|===
|Method |URI or template |Purpose |Notes

|GET
|/activities
|Returns the possible activities that can be suggested.
|Not yet implemented.

|GET
|/activities/states
|Returns the states for which activities can be provided.
|Not yet implemented.

|GET
|/activities/states/{state}
|Request activity suggestions for the given state
|Not yet implemented. How to as weather can vary dramatically from region to region?

|GET
|/activities/states/{state}/cities
|Returns the cities for which activities can be provided.
|Not yet implemented.

|GET
|/activities/states/{state}/cities/{city}
|Request activity suggestions for the given city and state
|This is the only endpoint implemented. Could be improved with time of day suggestions.

|GET
|/activities/states/{state}/cities/{city}/dates
|Returns the dates for which activities can be provided.
|Not yet implemented.

|GET
|/activities/states/{state}/cities/{city}/dates/{date}
|Request activity suggestions for the given city, state and date.
|Not yet implemented. Could be useful for planning ahead.

|PUT
|n/a
|na
|This does not provide create/update capabilities

|PATCH
|n/a
|na
|This does not provide create/update capabilities

|POST
|n/a
|na
|This does not provide create/update capabilities

|DELETE
|n/a
|na
|This does not provide create/update capabilities
|===

=== Technology Stack ===
Below is a list of technologies used in the development of Activity.

* Groovy 2.3.6
* JVM: 1.8.0_45 Vendor: Oracle Corporation
* OS: Linux Mint 17
* Spock 0.7-groovy-2.0
* DropWizard 0.7.1
* Gradle 2.0

=== Testing Theory ===
I find that Test Driven Development (TDD) yields both better code and better tests. I do
admit that I sometimes slip into writing solution code, then following it up with tests. I am
not perfect.

Using TDD leads to tests that _test behavior not implementation_. I'll address that further
below. What may surprise some is that my tests will reach across class boundaries. They may
shout _"Don't test your neighbors!"_ What many do not know is that this is a fundamental
difference in two schools of thought - the Detroit and London schools. They both have strengths.
I lean toward the former, viewing the unit under test as a unit of behavior. This means
interactions are not mocked unless they represent external input and output. In other words,
domain classes are not mocked, while boundaries are mocked. Boundaries - such as data repositories,
network i/o, and external systems, should be isolated with adapters, tested with integration
tests and mocked within the domain tests. End-to-end tests get called to assure that complete
path calls can be made. This still leaves us with unit tests that may involve more than
one class. How does this happen?

Most people familiar with TDD have heard the mantra: _red, green, refactor_.

. Start with a simple, failing test - _red bar_
. Write just enough code to make it work - _green bar_
. Now refactor.

Refactoring means a change made to the software making it easier to understand and/or less
expensive to modify while not changing observable behavior. In other words, simplifying. What is often
overlooked is that test code should as aggressively refactored as the implementation. I could even
argue that it is more so.

Initially,there is little refactoring to be done. Eventually, though, the realization dawns that the method
under test no longer adheres to the *Single Responsibility Principle*. So, the *Extract Method*
refactoring is applied (see http://www.refactoring.com/catalog/). Staying true to refactoring,
no observable behavior has changed and the tests pass without modification. This cycle is repeated
until several methods have been extracted. This is when it is determined that the class under
test is no longer adherring to the single responsibility principle and the *Extract Class*
refactoring is applied. This cycle can repeat itself many times, all while running the same
suite of tests. Hence, testing behavior. And, this is how you end up with tests that traverse
into other classes.

All that said, after I have fleshed out all the behavior and have refactored to my satisfaction
I will add further test where I feel it necessary. These tests tend to be more about regression.

My experience tells me that this is a better way of practising TDD. I do understand others strongly
believe that all dependencies should be mocked. I would be happy to engage in a theoretical discussion
with others having such beliefs over a beer or coffee. In fact, this is one of my favorite activities,
for we all learn from them.

=== Disclaimer ===
Not having access to a user nor analyst is not a natural condition. There were conflicting
or unclear requirements that needed resolution. Also, other design choices would
have been made having someone available.

The very first requirement is unclear. What does _a good day to do things outside *for the week*_
actually mean? This also conflicted
with the requirement to take a location and a date(s). Discussing this with
colleagues, we agreed that the default action of passing a city and state would suggest
activities for each day of the week. The endpoints were purposely designed to allow for
retrieving suggestions in multiple ways.

This cannot be considered production ready. I viewed this as a story that would have
further stories addressing issues such as authorization, as well as implementing the
other endpoints.

== Considerations for Future Releases ==
* Add in basic authorization
